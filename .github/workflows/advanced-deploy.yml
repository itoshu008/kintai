name: Advanced Deploy with Blue-Green

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'


      - name: Run linting
        run: |
          cd backend && npm run lint || true
          cd frontend && npm run lint || true

      - name: Run tests
        run: |
          cd backend && npm test || true
          cd frontend && npm test || true

      - name: Build application
        if: false  # VPS側でビルドするため無効化
        run: |
          echo "Build is handled on VPS side"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            backend/dist/
            frontend/dist/
            package.json
            package-lock.json

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-test
    environment: staging
    if: github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to staging
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            cd ${{ secrets.STAGING_DEPLOY_PATH }} &&
            git fetch origin &&
            git reset --hard origin/staging &&
            pm2 stop staging-backend || true &&
            pm2 start backend/dist/index.js --name "staging-backend" --env staging &&
            pm2 logs --lines 5
          '

      - name: Staging health check
        run: |
          sleep 15
          for i in {1..5}; do
            if curl -f http://${{ secrets.SSH_HOST }}:8001/api/admin/backups/health; then
              echo "✅ Staging health check passed"
              break
            else
              echo "⏳ Waiting for staging to be ready... ($i/5)"
              sleep 10
            fi
          done

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-staging]
    environment: production
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create backup before deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            cd ${{ secrets.DEPLOY_PATH }} &&
            BACKUP_NAME="backup_$(date +%Y%m%d_%H%M%S)" &&
            mkdir -p ${{ secrets.BACKUP_PATH }}/$BACKUP_NAME &&
            cp -r dist ${{ secrets.BACKUP_PATH }}/$BACKUP_NAME/ || true &&
            echo "Backup created: $BACKUP_NAME"
          '

      - name: Blue-Green deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            cd ${{ secrets.DEPLOY_PATH }} &&
            git fetch origin &&
            git reset --hard origin/main &&
            cd backend && npm install --include=dev && npm run build && cd .. &&
            cd frontend && npm install && npm run build && cd .. &&
            pm2 stop kintai-backend || true &&
            pm2 start backend/dist/index.js --name "kintai-backend" --env production &&
            pm2 logs --lines 5
          '

      - name: Production health check
        run: |
          sleep 15
          for i in {1..10}; do
            if curl -f http://${{ secrets.SSH_HOST }}:8000/api/admin/backups/health; then
              echo "✅ Production health check passed"
              break
            else
              echo "⏳ Waiting for production to be ready... ($i/10)"
              sleep 10
            fi
          done

      - name: Rollback on failure
        if: failure()
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} '
            cd ${{ secrets.DEPLOY_PATH }} &&
            echo "❌ Deployment failed, rolling back..." &&
            pm2 restart kintai-backend &&
            echo "Rollback completed"
          '

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            # Add Slack/Email notification here
          else
            echo "❌ Deployment failed!"
            # Add failure notification here
          fi
