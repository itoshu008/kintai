name: Deploy to VPS (SSH Fix)
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    env:
      APP_DIR: /home/zatint1991-hvt55/zatint1991.com
      BACKEND_DIR: /home/zatint1991-hvt55/zatint1991.com/backend
      FRONTEND_DIR: /home/zatint1991-hvt55/zatint1991.com/frontend
      PUBLIC_DIR: /home/zatint1991-hvt55/zatint1991.com/public/admin-dashboard-2024
      PM2_APP: kintai-api
      PM2_USER: itoshu
      PORT: "8001"
      NODE_ENV: production
      DEPLOY_USER: ${{ secrets.VPS_USER }}
      BUILD_USER: itoshu
      VPS_HOST: ${{ secrets.VPS_HOST }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Configure SSH
        run: |
          echo "🔧 Configuring SSH..."
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # SSH設定ファイルを作成
          cat > ~/.ssh/config << EOF
          Host $VPS_HOST
            HostName $VPS_HOST
            User $BUILD_USER
            Port 22
            ConnectTimeout 60
            ServerAliveInterval 30
            ServerAliveCountMax 3
            TCPKeepAlive yes
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            LogLevel ERROR
          EOF
          
          chmod 600 ~/.ssh/config
          echo "✅ SSH configuration created"

      - name: Test network connectivity
        run: |
          echo "🌐 Testing network connectivity..."
          ping -c 3 $VPS_HOST || echo "Ping failed, but continuing..."
          nc -z -v $VPS_HOST 22 || echo "Port 22 check failed, but continuing..."
          echo "✅ Network test completed"

      - name: Test SSH connection (with retry)
        run: |
          echo "🔍 Testing SSH connection with retry..."
          for i in {1..5}; do
            echo "SSH attempt $i/5..."
            if ssh -o ConnectTimeout=30 -o ServerAliveInterval=10 "$BUILD_USER@$VPS_HOST" "echo 'SSH connection successful'"; then
              echo "✅ SSH connection verified"
              break
            else
              echo "❌ SSH attempt $i failed"
              if [ $i -lt 5 ]; then
                echo "⏳ Waiting 10 seconds before retry..."
                sleep 10
              else
                echo "❌ All SSH attempts failed"
                exit 1
              fi
            fi
          done

      - name: Check VPS status
        run: |
          echo "🔍 Checking VPS status..."
          ssh "$BUILD_USER@$VPS_HOST" <<EOF
          echo "=== VPS Status ==="
          echo "Current user: \$(whoami)"
          echo "Current directory: \$(pwd)"
          echo "Uptime:"
          uptime
          echo "Disk usage:"
          df -h | head -5
          echo "Memory usage:"
          free -h
          echo "Network status:"
          ss -tlnp | grep ":22 " || echo "SSH port not listening"
          echo "PM2 status:"
          pm2 status || echo "PM2 not running"
          echo "Nginx status:"
          sudo systemctl status nginx --no-pager | head -5 || echo "Nginx not running"
          EOF

      - name: Deploy backend
        run: |
          echo "🚀 Deploying backend..."
          ssh "$BUILD_USER@$VPS_HOST" <<EOF
          set -e
          echo "Stopping existing PM2 processes..."
          pm2 stop "$PM2_APP" || echo "PM2 app not running"
          pm2 delete "$PM2_APP" || echo "PM2 app not found"
          
          cd "$BACKEND_DIR"
          echo "Installing backend dependencies..."
          npm ci --no-audit --no-fund || npm install --no-audit --no-fund
          echo "Building backend..."
          npm run build
          echo "Starting PM2..."
          pm2 start dist/index.js --name "$PM2_APP" --env production
          pm2 save
          echo "✅ Backend deployed"
          EOF

      - name: Wait for backend
        run: |
          echo "⏳ Waiting for backend to start..."
          sleep 20
          echo "Checking backend status..."
          ssh "$BUILD_USER@$VPS_HOST" "pm2 status"
          echo "✅ Backend startup wait completed"

      - name: Deploy frontend
        run: |
          echo "🎨 Deploying frontend..."
          ssh "$BUILD_USER@$VPS_HOST" <<EOF
          set -e
          cd "$FRONTEND_DIR"
          echo "Installing frontend dependencies..."
          npm ci --no-audit --no-fund || npm install --no-audit --no-fund
          echo "Building frontend..."
          npm run build
          echo "Publishing frontend..."
          sudo mkdir -p "$PUBLIC_DIR"
          rsync -az --delete dist/ "$PUBLIC_DIR/"
          sudo chown -R itoshu:itoshu "$PUBLIC_DIR"
          echo "✅ Frontend deployed"
          EOF

      - name: Update nginx config
        run: |
          echo "⚙️ Updating nginx config..."
          scp nginx-zatint1991-final.conf "$BUILD_USER@$VPS_HOST:/tmp/nginx-zatint1991.conf"
          ssh "$BUILD_USER@$VPS_HOST" <<EOF
          sudo cp /tmp/nginx-zatint1991.conf /etc/nginx/sites-enabled/zatint1991.com
          sudo nginx -t
          sudo systemctl reload nginx
          echo "✅ nginx config updated"
          EOF

      - name: Final verification
        run: |
          echo "🔍 Final verification..."
          ssh "$BUILD_USER@$VPS_HOST" <<EOF
          echo "=== Final Status ==="
          echo "PM2 status:"
          pm2 status
          echo "Nginx status:"
          sudo systemctl status nginx --no-pager | head -5
          echo "Port $PORT status:"
          ss -tlnp | grep ":$PORT " || echo "Port $PORT not listening"
          echo "Frontend files:"
          ls -la "$PUBLIC_DIR" | head -5
          echo "✅ Final verification completed"
          EOF

      - name: Success notification
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "You can now access:"
          echo "- Master page: https://zatint1991.com/kintai/"
          echo "- Personal page: https://zatint1991.com/kintai/personal"
