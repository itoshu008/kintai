name: Deploy to VPS
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      APP_DIR: /home/zatint1991-hvt55/zatint1991.com
      BACKEND_DIR: /home/zatint1991-hvt55/zatint1991.com/backend
      FRONTEND_DIR: /home/zatint1991-hvt55/zatint1991.com/frontend
      PUBLIC_DIR: /home/zatint1991-hvt55/zatint1991.com/public/admin-dashboard-2024
      PM2_APP: kintai-api
      PM2_USER: itoshu
      PORT: "8001"
      NODE_ENV: production
      DEPLOY_USER: ${{ secrets.VPS_USER }}
      BUILD_USER: itoshu
      VPS_HOST: ${{ secrets.VPS_HOST }}

    steps:
      - uses: actions/checkout@v4

      - name: Drift guard (ESM & pm2)
        run: |
          set -Eeuo pipefail
          ! grep -RInE "from ['\"][.]{1,2}/[^'\".]+['\"]" backend/src || (echo "ESM import missing .js" && exit 20)
          jq -e '.compilerOptions.module=="NodeNext" and .compilerOptions.moduleResolution=="NodeNext"' backend/tsconfig.json >/dev/null
          jq -e '.type=="module"' backend/package.json >/dev/null

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -R "$VPS_HOST" 2>/dev/null || true
          ssh-keyscan -H "$VPS_HOST" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Prepare target (as itoshu, no sudo)
        run: |
          ssh "$BUILD_USER@$VPS_HOST" <<EOF
          set -Eeuo pipefail
          mkdir -p "$APP_DIR/scripts" "$BACKEND_DIR" "$FRONTEND_DIR"
          find "$BACKEND_DIR" -type d -exec chmod 775 {} \; || true
          find "$BACKEND_DIR" -type f -exec chmod 664 {} \; || true
          EOF

      - name: Ensure deploy scripts are executable (repo side)
        run: |
          chmod +x scripts/deploy_rsync.sh
          chmod +x scripts/deploy_backend.sh

      - name: Guard: ensure backend script exists
        run: |
          test -x scripts/deploy_backend.sh || { echo "missing scripts/deploy_backend.sh"; exit 127; }

      - name: Dry run rsync
        env:
          BUILD_USER: itoshu
          VPS_HOST: ${{ secrets.VPS_HOST }}
          BACKEND_DIR: /home/zatint1991-hvt55/zatint1991.com/backend
          FRONTEND_DIR: /home/zatint1991-hvt55/zatint1991.com/frontend
        run: |
          set -Eeuo pipefail
          DRY_RUN=1 bash scripts/deploy_rsync.sh | tee rsync_dry.log
          grep -E 'Number of files|Total transferred file size|sent .* bytes' rsync_dry.log || true

      - name: Run rsync with timing
        env:
          BUILD_USER: itoshu
          VPS_HOST: ${{ secrets.VPS_HOST }}
          BACKEND_DIR: /home/zatint1991-hvt55/zatint1991.com/backend
          FRONTEND_DIR: /home/zatint1991-hvt55/zatint1991.com/frontend
        run: |
          set -Eeuo pipefail
          /usr/bin/time -f 'elapsed=%E  user=%U  sys=%S' bash -c 'scripts/deploy_rsync.sh' | tee rsync_run.log

      - name: Upload backend deploy script to VPS
        run: |
          scp scripts/deploy_backend.sh "$BUILD_USER@$VPS_HOST:$APP_DIR/scripts/"
          ssh "$BUILD_USER@$VPS_HOST" "chmod +x $APP_DIR/scripts/deploy_backend.sh"

      - name: Deploy backend (SoT → PM2 → gates)
        run: |
          ssh "$BUILD_USER@$VPS_HOST" <<EOF
          set -Eeuo pipefail
          export PM2_HOME="/home/$BUILD_USER/.pm2"
          export BACKEND_DIR="$BACKEND_DIR"
          export PM2_APP="$PM2_APP"
          cd "$APP_DIR"
          scripts/deploy_backend.sh
          EOF

      - name: Post-deploy gates (health/port/frontend/nginx/commit)
        env:
          BUILD_USER: itoshu
          VPS_HOST: ${{ secrets.VPS_HOST }}
          APP_DIR: /home/zatint1991-hvt55/zatint1991.com
          BACKEND_DIR: /home/zatint1991-hvt55/zatint1991.com/backend
          FRONTEND_DIR: /home/zatint1991-hvt55/zatint1991.com/frontend
          PUBLIC_DIR: /home/zatint1991-hvt55/zatint1991.com/public/admin-dashboard-2024
          PM2_APP: kintai-api
          PORT: "8001"
        run: |
          ssh "$BUILD_USER@$VPS_HOST" <<EOF
          set -Eeuo pipefail
          APP_DIR="$APP_DIR"
          FRONTEND_DIR="$FRONTEND_DIR"
          PUBLIC_DIR="$PUBLIC_DIR"
          PM2_APP="$PM2_APP"
          PORT="$PORT"

          echo "== Gate 1: Health gate (3 consecutive OK) =="
          ok=0; streak=0; i=0
          while [ \$i -lt 30 ]; do
            if curl -fsS --max-time 20 "http://127.0.0.1:\${PORT}/api/admin/health" | grep -q '"ok":true'; then
              streak=\$((streak+1)); echo "health OK (\$streak/3)"
              if [ \$streak -ge 3 ]; then ok=1; break; fi
            else
              streak=0; echo "health NG (reset)"
            fi
            sleep 1; i=\$((i+1))
          done
          [ \$ok -eq 1 ] || { echo "❌ Health gate failed";
            ERR_LOG=\$(pm2 info "$PM2_APP" | awk -F': ' '/error log path/ {print \$2}');
            [ -f "\$ERR_LOG" ] && { echo "---PM2 ERR---"; tail -n 200 "\$ERR_LOG"; };
            exit 10; }

          echo "== Gate 2: Port \${PORT} stability (3/3 listen) =="
          for j in 1 2 3; do
            ss -H -ltn "( sport = :\${PORT} )" | grep -q . || { echo "❌ not listening on :\${PORT}"; exit 11; }
            sleep 1
          done
          echo "✅ Port \${PORT} stable"

          echo "== Gate 3: Build frontend & publish (as itoshu) =="
          sudo -u itoshu bash -lc "
            set -Eeuo pipefail
            cd '$FRONTEND_DIR'
            npm ci --no-audit --no-fund || npm install --no-audit --no-fund
            npm run build
          "
          sudo mkdir -p "$PUBLIC_DIR"
          rsync -az --delete --exclude ".git" --exclude "node_modules" \
            "$FRONTEND_DIR/dist/" "$PUBLIC_DIR/"
          sudo chown -R itoshu:itoshu "$PUBLIC_DIR"

          echo "== Gate 4: Reload nginx =="
          sudo nginx -t
          sudo systemctl reload nginx
          echo "✅ nginx reloaded"

          echo "== Final: masked commit tag =="
          cd "$APP_DIR"
          git config --global user.email "ci@zat.int"
          git config --global user.name  "CI Bot"
          git commit --allow-empty -m "[deploy] health ok / port \${PORT} ok / frontend published / nginx reloaded (*** masked)" || true
          EOF