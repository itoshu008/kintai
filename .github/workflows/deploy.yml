name: Deploy to VPS
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      APP_DIR: /home/zatint1991-hvt55/zatint1991.com
      BACKEND_DIR: /home/zatint1991-hvt55/zatint1991.com/backend
      FRONTEND_DIR: /home/zatint1991-hvt55/zatint1991.com/frontend
      PUBLIC_DIR: /home/zatint1991-hvt55/zatint1991.com/public/admin-dashboard-2024
      PM2_APP: kintai-api
      PM2_USER: itoshu
      PORT: "8001"
      NODE_ENV: production
      DEPLOY_USER: ${{ secrets.VPS_USER }}   # ← たぶん deploy
      BUILD_USER: itoshu
      VPS_HOST:   ${{ secrets.VPS_HOST }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: '22.12.0'
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -R "$VPS_HOST" 2>/dev/null || true
          ssh-keyscan -H "$VPS_HOST" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Rsync sources (backend / frontend only)
        run: |
          set -euo pipefail
          RSYNC_OPTS="-az -O --no-perms --no-group --omit-dir-times --delete \
            --exclude '.git' --exclude 'node_modules' \
            --exclude 'backups*/' --exclude 'data*/' \
            --exclude '.public_build*/' --exclude 'public-backup*/' \
            --exclude 'dist-ultimate*/' --exclude 'kintai*/'"
          RSYNC_SSH="ssh -o StrictHostKeyChecking=accept-new"

          rsync -e "$RSYNC_SSH" $RSYNC_OPTS ./backend/  "$DEPLOY_USER@$VPS_HOST:$BACKEND_DIR/"  --rsync-path="sudo -u $PM2_USER rsync"
          rsync -e "$RSYNC_SSH" $RSYNC_OPTS ./frontend/ "$DEPLOY_USER@$VPS_HOST:$FRONTEND_DIR/" --rsync-path="sudo -u $PM2_USER rsync"

      - name: Build backend & reload PM2 (run as itoshu)
        run: |
          ssh "$BUILD_USER@$VPS_HOST" "
            set -e
            cd \"$BACKEND_DIR\"
            npm install --omit=dev --no-audit --no-fund    # ← 一時的に install（lock不一致を回避）
            npm run build
            pm2 reload \"$PM2_APP\" || pm2 start \"$BACKEND_DIR/pm2.config.cjs\" --only \"$PM2_APP\"
            pm2 save
          "

      - name: Health gate
        run: |
          ssh "$BUILD_USER@$VPS_HOST" '
            for i in {1..15}; do curl -fsS http://127.0.0.1:8001/api/admin/health && exit 0; sleep 2; done; exit 1
          '

      - name: Build frontend & publish (run as itoshu)
        run: |
          ssh "$BUILD_USER@$VPS_HOST" "
            set -e
            if [ -d \"$FRONTEND_DIR\" ]; then
              cd \"$FRONTEND_DIR\"
              npm install --no-audit --no-fund
              npm run build
              rm -rf \"$PUBLIC_DIR\"
              mkdir -p \"$PUBLIC_DIR\"
              rsync -a --delete \"$FRONTEND_DIR/dist/\" \"$PUBLIC_DIR/\"
            else
              echo 'frontend/ not found, skip.'
            fi
          "

      - name: Reload nginx (run as deploy with sudoers)
        run: |
          ssh "$DEPLOY_USER@$VPS_HOST" "sudo /usr/sbin/nginx -t && sudo /usr/bin/systemctl reload nginx"

      - name: Write deployed commit
        run: |
          # 日付はリモート側で展開（\$ をエスケープ）
          ssh "$BUILD_USER@$VPS_HOST" "echo '${{ github.sha }} \$(date -u +%FT%TZ)' > \"$APP_DIR/DEPLOYED_SHA.txt\""