name: Deploy to VPS
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      APP_DIR: /home/zatint1991-hvt55/zatint1991.com
      BACKEND_DIR: /home/zatint1991-hvt55/zatint1991.com/backend
      FRONTEND_DIR: /home/zatint1991-hvt55/zatint1991.com/frontend
      PUBLIC_DIR: /home/zatint1991-hvt55/zatint1991.com/public/admin-dashboard-2024
      PM2_APP: kintai-api
      PM2_USER: itoshu
      PORT: "8001"
      NODE_ENV: production
      DEPLOY_USER: ${{ secrets.VPS_USER }}   # ← たぶん deploy
      BUILD_USER: itoshu
      VPS_HOST:   ${{ secrets.VPS_HOST }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -R "$VPS_HOST" 2>/dev/null || true
          ssh-keyscan -H "$VPS_HOST" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Prepare target (as itoshu, no sudo)
        run: |
          ssh "$BUILD_USER@$VPS_HOST" "
            set -e
            mkdir -p '$BACKEND_DIR' '$FRONTEND_DIR'
            # 既存がroot所有でも以後の新規は itoshu 所有になる。chmodは失敗しても無視。
            find '$BACKEND_DIR' -type d -exec chmod 775 {} \; || true
            find '$BACKEND_DIR' -type f -exec chmod 664 {} \; || true
          "

      - name: Ensure deploy script executable (safety)
        run: chmod +x scripts/deploy_rsync.sh

      - name: Dry run rsync
        env:
          BUILD_USER: itoshu
          VPS_HOST: ${{ secrets.VPS_HOST }}
          BACKEND_DIR: /home/zatint1991-hvt55/zatint1991.com/backend
          FRONTEND_DIR: /home/zatint1991-hvt55/zatint1991.com/frontend
        run: |
          set -Eeuo pipefail
          DRY_RUN=1 bash scripts/deploy_rsync.sh | tee rsync_dry.log
          grep -E 'Number of files|Total transferred file size|sent .* bytes' rsync_dry.log || true

      - name: Run rsync with timing
        env:
          BUILD_USER: itoshu
          VPS_HOST: ${{ secrets.VPS_HOST }}
          BACKEND_DIR: /home/zatint1991-hvt55/zatint1991.com/backend
          FRONTEND_DIR: /home/zatint1991-hvt55/zatint1991.com/frontend
        run: |
          set -Eeuo pipefail
          /usr/bin/time -f 'elapsed=%E  user=%U  sys=%S' bash -c 'scripts/deploy_rsync.sh' | tee rsync_run.log

      - name: Build & restart backend on VPS (safe by name)
        env:
          BUILD_USER: itoshu
          VPS_HOST: ${{ secrets.VPS_HOST }}
          BACKEND_DIR: /home/zatint1991-hvt55/zatint1991.com/backend
          PM2_APP: kintai-api
        run: |
          set -Eeuo pipefail
          ssh "$BUILD_USER@$VPS_HOST" '
            set -e
            cd "'"$BACKEND_DIR"'"
            npm ci --include=dev --no-audit --no-fund
            npm run build
            npm prune --omit=dev
            if pm2 describe "'"$PM2_APP"'" >/dev/null 2>&1; then
              pm2 restart "'"$PM2_APP"'" --update-env
            else
              pm2 start "'"$BACKEND_DIR"'/pm2.config.cjs" --only "'"$PM2_APP"'"
            fi
            pm2 save
            pm2 status "'"$PM2_APP"'"
            pm2 logs "'"$PM2_APP"'" --lines 50 --timestamp --raw || true
            curl -sS http://127.0.0.1:8001/api/admin/health || true
          '

      - name: Health gate
        run: |
          ssh "$BUILD_USER@$VPS_HOST" '
            for i in {1..15}; do curl -fsS http://127.0.0.1:8001/api/admin/health && exit 0; sleep 2; done; exit 1
          '

      - name: Port 8001 stability verification
        run: |
          ssh "$BUILD_USER@$VPS_HOST" '
            set -Eeuo pipefail
            echo "🔍 Verifying port 8001 stability..."
            
            # 1) PM2の環境にPORT=8001が入っていること
            echo "Checking PM2 environment variables..."
            pm2 env $(pm2 pid kintai-api | tr -d "\n") | grep -q "^PORT=8001$" || {
              echo "❌ PORT is not 8001 in PM2 environment"
              pm2 env $(pm2 pid kintai-api | tr -d "\n") | grep "^PORT=" || echo "PORT not found"
              exit 1
            }
            
            # 2) 8001がLISTENしていること
            echo "Checking if port 8001 is listening..."
            ss -lntp | grep -q ":8001 " || {
              echo "❌ Port 8001 is not listening"
              ss -lntp | grep ":800" || echo "No ports in 800x range found"
              exit 1
            }
            
            # 3) ヘルスOK
            echo "Checking health endpoint..."
            curl -fsS http://127.0.0.1:8001/api/admin/health | grep -q "\"ok\":true" || {
              echo "❌ Health check failed"
              curl -sS http://127.0.0.1:8001/api/admin/health || echo "Health endpoint not responding"
              exit 1
            }
            
            echo "✅ Port 8001 health OK - all checks passed"
          '

      - name: Build frontend & publish (run as itoshu)
        run: |
          ssh "$BUILD_USER@$VPS_HOST" "
            set -e
            if [ -d \"$FRONTEND_DIR\" ]; then
              cd \"$FRONTEND_DIR\"
              npm install --include=dev --no-audit --no-fund
              npm run build
              rm -rf \"$PUBLIC_DIR\"
              mkdir -p \"$PUBLIC_DIR\"
              rsync -a --delete \"$FRONTEND_DIR/dist/\" \"$PUBLIC_DIR/\"
            else
              echo 'frontend/ not found, skip.'
            fi
          "

      - name: Reload nginx (as deploy)
        run: ssh "$DEPLOY_USER@$VPS_HOST" "sudo /usr/sbin/nginx -t && sudo /usr/bin/systemctl reload nginx"

      - name: Write deployed commit
        run: |
          # 日付はリモート側で展開（\$ をエスケープ）
          ssh "$BUILD_USER@$VPS_HOST" "echo '${{ github.sha }} \$(date -u +%FT%TZ)' > \"$APP_DIR/DEPLOYED_SHA.txt\""