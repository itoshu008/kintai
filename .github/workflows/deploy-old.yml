name: Deploy to VPS (Ultra Safe)
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      VPS_HOST: ${{ secrets.VPS_HOST }}
      VPS_USER: ${{ secrets.VPS_USER }}
      APP_DIR: /home/zatint1991-hvt55/zatint1991.com
      BACKEND_DIR: /home/zatint1991-hvt55/zatint1991.com/backend
      FRONTEND_DIR: /home/zatint1991-hvt55/zatint1991.com/frontend
      PUBLIC_DIR: /home/zatint1991-hvt55/zatint1991.com/public/admin-dashboard-2024
      PM2_APP: kintai-api
      PM2_HOME: /home/itoshu/.pm2
      PORT: "8001"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Configure SSH (Ultra Safe)
        run: |
          echo "🔧 Configuring SSH for maximum safety..."
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # SSH設定ファイルを作成
          cat > ~/.ssh/config << EOF
          Host $VPS_HOST
            HostName $VPS_HOST
            User $VPS_USER
            Port 22
            ConnectTimeout 60
            ServerAliveInterval 15
            ServerAliveCountMax 6
            TCPKeepAlive yes
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            LogLevel ERROR
            Compression yes
            CompressionLevel 6
          EOF
          
          chmod 600 ~/.ssh/config
          echo "✅ SSH configuration completed"

      - name: Test connection (with retry)
        run: |
          echo "🔍 Testing connection with retry..."
          for i in {1..3}; do
            echo "Connection attempt $i/3..."
            if ssh "$VPS_USER@$VPS_HOST" "echo 'Connection successful'"; then
              echo "✅ Connection verified"
              break
            else
              echo "❌ Connection attempt $i failed"
              if [ $i -lt 3 ]; then
                echo "⏳ Waiting 5 seconds before retry..."
                sleep 5
              else
                echo "❌ All connection attempts failed"
                exit 1
              fi
            fi
          done

      - name: Pre-deployment check
        run: |
          echo "🔍 Pre-deployment system check..."
          ssh "$VPS_USER@$VPS_HOST" << 'EOF'
          echo "=== System Status ==="
          echo "Uptime: $(uptime)"
          echo "Disk usage:"
          df -h | head -5
          echo "Memory usage:"
          free -h
          echo "Current PM2 status:"
          pm2 status || echo "PM2 not running"
          echo "Nginx status:"
          systemctl is-active nginx || echo "Nginx not active"
          echo "Port $PORT status:"
          ss -tlnp | grep ":$PORT " || echo "Port $PORT not listening"
          EOF

      - name: Safe deployment
        run: |
          echo "🚀 Starting ultra-safe deployment..."
          ssh "$VPS_USER@$VPS_HOST" << 'EOF'
          set -e
          
          echo "📁 Creating directories..."
          mkdir -p "$APP_DIR/scripts" "$BACKEND_DIR" "$FRONTEND_DIR" "$PUBLIC_DIR"
          
          echo "🔄 Updating code safely..."
          cd "$APP_DIR"
          git fetch origin
          git reset --hard origin/main
          
          echo "🚀 Deploying backend safely..."
          cd "$BACKEND_DIR"
          
          # 依存関係のインストール（安全に）
          echo "Installing backend dependencies..."
          npm ci --include=dev --no-audit --no-fund || npm install --include=dev --no-audit --no-fund
          
          # ビルド
          echo "Building backend..."
          npm run build
          
          # 本番用に最適化
          echo "Optimizing for production..."
          npm prune --omit=dev
          
          echo "🟢 Managing PM2 safely..."
          export PM2_HOME="$PM2_HOME"
          
          # 既存のプロセスを安全に停止
          pm2 stop "$PM2_APP" || echo "PM2 app not running"
          pm2 delete "$PM2_APP" || echo "PM2 app not found"
          
          # 新しいプロセスを開始
          pm2 start "$BACKEND_DIR/pm2.config.cjs" --only "$PM2_APP"
          pm2 save
          
          echo "⏳ Waiting for backend to start..."
          sleep 10
          
          echo "🧪 Testing backend health..."
          for i in {1..10}; do
            if curl -fsS --max-time 5 "http://127.0.0.1:$PORT/api/admin/health" | grep -q '"ok":true'; then
              echo "✅ Backend health check passed"
              break
            else
              echo "⏳ Waiting for backend... ($i/10)"
              sleep 2
            fi
          done
          
          echo "🎨 Deploying frontend safely..."
          cd "$FRONTEND_DIR"
          
          # 依存関係のインストール
          echo "Installing frontend dependencies..."
          npm ci --no-audit --no-fund || npm install --no-audit --no-fund
          
          # ビルド
          echo "Building frontend..."
          npm run build
          
          # ファイルの配置
          echo "Publishing frontend..."
          rsync -az --delete "$FRONTEND_DIR/dist/" "$PUBLIC_DIR/"
          chown -R itoshu:itoshu "$PUBLIC_DIR"
          
          echo "⚙️ Updating nginx safely..."
          nginx -t
          systemctl reload nginx
          
          echo "✅ Deployment completed successfully!"
          EOF

      - name: Post-deployment verification
        run: |
          echo "🔍 Post-deployment verification..."
          ssh "$VPS_USER@$VPS_HOST" << 'EOF'
          echo "=== Final Status ==="
          echo "PM2 status:"
          pm2 status
          echo
          echo "Nginx status:"
          systemctl is-active nginx && nginx -t
          echo
          echo "Port $PORT status:"
          ss -tlnp | grep ":$PORT " || echo "Port $PORT not listening"
          echo
          echo "Backend health:"
          curl -fsS "http://127.0.0.1:$PORT/api/admin/health" || echo "Health check failed"
          echo
          echo "Frontend files:"
          ls -la "$PUBLIC_DIR" | head -5
          echo
          echo "Frontend access test:"
          curl -I "https://zatint1991.com/kintai/" | head -5 || echo "Frontend access failed"
          EOF

      - name: Success notification
        run: |
          echo "🎉 Ultra-safe deployment completed successfully!"
          echo "✅ All systems are operational"
          echo "🌐 Access URLs:"
          echo "  - Master page: https://zatint1991.com/kintai/"
          echo "  - Personal page: https://zatint1991.com/kintai/personal"
